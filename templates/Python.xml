<templateSet group="Python">
  <template name="testfile" value="import unittest&#10;from unittest.mock import MagicMock&#10;from unittest.mock import patch&#10;&#10;&#10;class Test$class_name$(unittest.TestCase):&#10;    &quot;&quot;&quot;Test suite for &quot;&quot;&quot;&#10;&#10;    @patch('mocking_example')&#10;    def test_$test_name$(self, mocking_example: MagicMock):&#10;        &quot;&quot;&quot;Should ...&quot;&quot;&quot;&#10;&#10;    # TODO: Add other tests&#10;" description="Creates unittest basic code." toReformat="false" toShortenFQNames="true">
    <variable name="class_name" expression="snakeCase(String)" defaultValue="Module" alwaysStopAt="true" />
    <variable name="test_name" expression="underscoresToSpaces(String)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="gluedroptable" value="from emr_manager import destructor&#10;&#10;destructor.run(database='mercury', &#10;               table_names=['$table_name$'], &#10;               aws_profile='dedevel')" description="Deletes table in glue" toReformat="false" toShortenFQNames="true">
    <variable name="table_name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="gluecreatetables" value="import datetime&#10;from datetime import timedelta&#10;&#10;import boto3&#10;&#10;from emr_manager import creator&#10;from emr_manager import updater&#10;from emr_manager import destructor&#10;from emr_manager import glue&#10;from emr_manager import schemas&#10;&#10;def get_database_tables(database, glue_tables):&#10;    return [&#10;        table['table_name']&#10;        for table in glue_tables&#10;        if table['database'] == database&#10;    ]&#10;&#10;&#10;start_time = datetime.datetime.utcnow()&#10;print('UTC End time: ', start_time)&#10;partitions_num = 1&#10;destruct = False&#10;&#10;session = boto3.Session(profile_name='$aws_profile$')&#10;client = session.client('glue')&#10;&#10;definitions_path = schemas.get_local_definitions_path()&#10;dynamo_db_tables = schemas.existing_table_names(definitions_path)&#10;&#10;unique_databases: set = {&#10;    dictionary['database']&#10;    for dictionary in dynamo_db_tables&#10;}&#10;&#10;databases = list(unique_databases)&#10;glue_tables = glue.get_table_names(client, databases)&#10;&#10;if destruct:&#10;    for database in databases:&#10;        db_tables = get_database_tables(database, glue_tables)&#10;        destructor.run(database, db_tables, aws_profile='$aws_profile$')&#10;&#10;creator.run(aws_profile='$aws_profile$', is_local=$is_local$)&#10;#updater.run(aws_profile='$aws_profile$', is_local=$is_local$)&#10;&#10;&#10;end_time = datetime.datetime.utcnow()&#10;print('UTC End time: ', end_time)&#10;print('Total Time (secconds):', (end_time - start_time).total_seconds(),&#10;      'Total Time (minutes):', (end_time - start_time).total_seconds()/60)&#10;&#10;print('Last Partition: ', datetime.datetime.utcnow() + timedelta(&#10;    hours=partitions_num - 1))&#10;" description="Deletes and creates all glue tables" toReformat="false" toShortenFQNames="true">
    <variable name="aws_profile" expression="" defaultValue="dedevel" alwaysStopAt="true" />
    <variable name="is_local" expression="" defaultValue="True" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="glueupdatepartitions" value="from datetime import datetime&#10;&#10;import boto3&#10;&#10;from emr_manager import creator&#10;from emr_manager import glue&#10;from emr_manager import schemas&#10;from emr_manager import updater&#10;&#10;start_time = datetime.utcnow()&#10;print('UTC End time: ', start_time)&#10;&#10;session = boto3.Session(profile_name='$profile$')&#10;client = session.client('glue')&#10;&#10;definitions_path = schemas.get_local_definitions_path()&#10;&#10;dynamo_db_tables = schemas.existing_table_names(definitions_path)&#10;&#10;unique_databases: set = {&#10;    dictionary['database']&#10;    for dictionary in dynamo_db_tables&#10;}&#10;&#10;databases = list(unique_databases)&#10;&#10;glue_tables = glue.get_table_names(client, databases)&#10;&#10;table_info = []&#10;for table_name in glue_tables:&#10;    database = table_name['database']&#10;&#10;    table_values = creator.get_table_values(&#10;        f'{database}_{table_name.get(&quot;table_name&quot;)}', definitions_path, session&#10;    )&#10;    last_partition = glue.get_last_partition(client, database, table_values, 0)&#10;&#10;    table_info.append(&#10;            {&#10;                'table_name': f'{database}.{table_name.get(&quot;table_name&quot;)}',&#10;                'last_partition': last_partition,&#10;                'new_last_partition': ''&#10;             }&#10;    )&#10;&#10;updater.run(future_hours=$future_hours$, aws_profile='$profile$')&#10;&#10;for table_name in glue_tables:&#10;    database = table_name['database']&#10;    table_values = creator.get_table_values(&#10;        f'{database}_{table_name.get(&quot;table_name&quot;)}', definitions_path, session&#10;    )&#10;    new_last_partition = glue.get_last_partition(&#10;        client, database, table_values, 0&#10;    )&#10;&#10;    for dict in table_info:&#10;        if dict.get('table_name') == (f&quot;{database}.&quot;&#10;                                      f&quot;{table_name.get('table_name')}&quot;):&#10;            dict.update(&#10;                (k, new_last_partition)&#10;                for k, v in dict.items()&#10;                if k == 'new_last_partition'&#10;            )&#10;&#10;&#10;end_time = datetime.utcnow()&#10;&#10;print('UTC End time: ', end_time)&#10;print('Total Time (secconds):', (end_time - start_time).total_seconds(), '\n'&#10;      'Total Time (minutes):', (end_time - start_time).total_seconds()/60)&#10;&#10;print('### Table Partition Information ###')&#10;for table in table_info:&#10;    last_partition = datetime.strptime(&#10;        table.get('last_partition'), '%Y-%m-%dT%H:%M:%SZ'&#10;    )&#10;    new_last_partition = datetime.strptime(table.get(&#10;        'new_last_partition'), '%Y-%m-%dT%H:%M:%SZ'&#10;    )&#10;    print(table)&#10;    print(new_last_partition - last_partition)&#10;" description="Updates glue existing tables partitions" toReformat="false" toShortenFQNames="true">
    <variable name="profile" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="future_hours" expression="" defaultValue="24" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="compl" value="[&#10;    $VAR_EXPR$ &#10;    for $VAR$ in $ITERABLE$&#10;]" description="List comprehension" toReformat="false" toShortenFQNames="true">
    <variable name="ITERABLE" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR" expression="collectionElementName(ITERABLE)" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR_EXPR" expression="" defaultValue="VAR" alwaysStopAt="true" />
    <context />
  </template>
  <template name="compli" value="[&#10;    $VAR_EXPR$ &#10;    for $VAR$ in $ITERABLE$ &#10;    if $VAR_EXPR_IF$&#10;]" description="List comprehension with 'if'" toReformat="false" toShortenFQNames="true">
    <variable name="ITERABLE" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR" expression="collectionElementName(ITERABLE)" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR_EXPR" expression="" defaultValue="VAR" alwaysStopAt="true" />
    <variable name="VAR_EXPR_IF" expression="" defaultValue="VAR" alwaysStopAt="true" />
    <context />
  </template>
  <template name="comps" value="{&#10;    $VAR_EXPR$ &#10;    for $VAR$ in $ITERABLE$&#10;}" description="Set comprehension" toReformat="false" toShortenFQNames="true">
    <variable name="ITERABLE" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR" expression="collectionElementName(ITERABLE)" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR_EXPR" expression="" defaultValue="VAR" alwaysStopAt="true" />
    <context />
  </template>
  <template name="compd" value="{&#10;    $KEY_EXPR$: $VAL_EXPR$ &#10;    for $VAR$ in $ITERABLE$&#10;}" description="Dict comprehension" toReformat="false" toShortenFQNames="true">
    <variable name="ITERABLE" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR" expression="collectionElementName(ITERABLE)" defaultValue="" alwaysStopAt="true" />
    <variable name="KEY_EXPR" expression="" defaultValue="VAR" alwaysStopAt="true" />
    <variable name="VAL_EXPR" expression="" defaultValue="VAR" alwaysStopAt="true" />
    <context />
  </template>
  <template name="compdi" value="{&#10;    $KEY_EXPR$: $VAL_EXPR$ &#10;    for $VAR$ in $ITERABLE$ &#10;    if $VAR_EXPR_IF$&#10;}" description="Dict comprehension with 'if'" toReformat="false" toShortenFQNames="true">
    <variable name="ITERABLE" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR" expression="collectionElementName(ITERABLE)" defaultValue="" alwaysStopAt="true" />
    <variable name="KEY_EXPR" expression="" defaultValue="VAR" alwaysStopAt="true" />
    <variable name="VAL_EXPR" expression="" defaultValue="VAR" alwaysStopAt="true" />
    <variable name="VAR_EXPR_IF" expression="" defaultValue="VAR" alwaysStopAt="true" />
    <context />
  </template>
  <template name="glue_get_last_partition" value="import boto3&#10;&#10;from emr_manager import creator&#10;from emr_manager import glue&#10;from emr_manager import schemas&#10;&#10;session =  boto3.Session(profile_name='$profile$')&#10;client = session.client('glue')&#10;&#10;database = '$database$' # e.g.: api&#10;table_name = '$table$' # e.g.: api_hourlyActiveSessions&#10;&#10;&#10;definition_path = schemas.get_local_definitions_path()&#10;&#10;table_values = creator.get_table_values(table_name, definition_path, session)&#10;&#10;las_partition = glue.get_last_partition(client, database, table_values)&#10;print(las_partition)&#10;" description="Gets the last partition for a table" toReformat="false" toShortenFQNames="true">
    <variable name="profile" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="database" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="table" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="glueDropTableByDB" value="from emr_manager import destructor&#10;from emr_manager.glue import tables&#10;import boto3&#10;&#10;database = input('Database name: ')&#10;&#10;session = boto3.Session(profile_name='$profile$')&#10;client = session.client('glue')&#10;&#10;glue_tables = tables.get_table_names(client, [database])&#10;&#10;table_names = [&#10;    tables['table_name']&#10;    for tables in glue_tables&#10;]&#10;&#10;destructor.run(database=database,&#10;               tables=table_names,&#10;               aws_profile='$profile$')&#10;" description="Drops tables in database" toReformat="false" toShortenFQNames="true">
    <variable name="profile" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>