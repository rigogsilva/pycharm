<templateSet group="Python">
  <template name="testfile" value="import unittest&#10;from unittest.mock import MagicMock&#10;from unittest.mock import patch&#10;&#10;&#10;class Test$class_name$(unittest.TestCase):&#10;    &quot;&quot;&quot;Test suite for &quot;&quot;&quot;&#10;&#10;    @patch('mocking_example')&#10;    def test_$test_name$(self, mocking_example: MagicMock):&#10;        &quot;&quot;&quot;Should ...&quot;&quot;&quot;&#10;&#10;    # TODO: Add other tests&#10;" description="Creates unittest basic code." toReformat="false" toShortenFQNames="true">
    <variable name="class_name" expression="snakeCase(String)" defaultValue="Module" alwaysStopAt="true" />
    <variable name="test_name" expression="underscoresToSpaces(String)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="gluedroptable" value="from emr_manager import destructor&#10;&#10;destructor.run(database='mercury', &#10;               table_names=['$table_name$'], &#10;               aws_profile='dedevel')" description="Deletes table in glue" toReformat="false" toShortenFQNames="true">
    <variable name="table_name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="gluecreatetables" value="import datetime&#10;from datetime import timedelta&#10;&#10;import boto3&#10;&#10;from emr_manager import creator&#10;from emr_manager import updater&#10;from emr_manager import destructor&#10;from emr_manager import glue&#10;from emr_manager import schemas&#10;&#10;def get_database_tables(database, glue_tables):&#10;    return [&#10;        table['table_name']&#10;        for table in glue_tables&#10;        if table['database'] == database&#10;    ]&#10;&#10;&#10;start_time = datetime.datetime.utcnow()&#10;print('UTC End time: ', start_time)&#10;partitions_num = 1&#10;destruct = False&#10;&#10;session = boto3.Session(profile_name='$aws_profile$')&#10;client = session.client('glue')&#10;&#10;definitions_path = schemas.get_local_definitions_path()&#10;dynamo_db_tables = schemas.existing_table_names(definitions_path)&#10;&#10;unique_databases: set = {&#10;    dictionary['database']&#10;    for dictionary in dynamo_db_tables&#10;}&#10;&#10;databases = list(unique_databases)&#10;glue_tables = glue.get_table_names(client, databases)&#10;&#10;if destruct:&#10;    for database in databases:&#10;        db_tables = get_database_tables(database, glue_tables)&#10;        destructor.run(database, db_tables, aws_profile='$aws_profile$')&#10;&#10;creator.run(aws_profile='$aws_profile$', is_local=$is_local$)&#10;#updater.run(aws_profile='$aws_profile$', is_local=$is_local$)&#10;&#10;&#10;end_time = datetime.datetime.utcnow()&#10;print('UTC End time: ', end_time)&#10;print('Total Time (secconds):', (end_time - start_time).total_seconds(),&#10;      'Total Time (minutes):', (end_time - start_time).total_seconds()/60)&#10;&#10;print('Last Partition: ', datetime.datetime.utcnow() + timedelta(&#10;    hours=partitions_num - 1))&#10;" description="Deletes and creates all glue tables" toReformat="false" toShortenFQNames="true">
    <variable name="aws_profile" expression="" defaultValue="dedevel" alwaysStopAt="true" />
    <variable name="is_local" expression="" defaultValue="True" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="glueupdatepartitions" value="from datetime import datetime&#10;&#10;import boto3&#10;&#10;from emr_manager import creator&#10;from emr_manager import glue&#10;from emr_manager import schemas&#10;from emr_manager import updater&#10;&#10;start_time = datetime.utcnow()&#10;print('UTC End time: ', start_time)&#10;&#10;session = boto3.Session(profile_name='$profile$')&#10;client = session.client('glue')&#10;&#10;definitions_path = schemas.get_local_definitions_path()&#10;&#10;dynamo_db_tables = schemas.existing_table_names(definitions_path)&#10;&#10;unique_databases: set = {&#10;    dictionary['database']&#10;    for dictionary in dynamo_db_tables&#10;}&#10;&#10;databases = list(unique_databases)&#10;&#10;glue_tables = glue.get_table_names(client, databases)&#10;&#10;table_info = []&#10;for table_name in glue_tables:&#10;    database = table_name['database']&#10;&#10;    table_values = creator.get_table_values(&#10;        f'{database}_{table_name.get(&quot;table_name&quot;)}', definitions_path, session&#10;    )&#10;    last_partition = glue.get_last_partition(client, database, table_values, 0)&#10;&#10;    table_info.append(&#10;            {&#10;                'table_name': f'{database}.{table_name.get(&quot;table_name&quot;)}',&#10;                'last_partition': last_partition,&#10;                'new_last_partition': ''&#10;             }&#10;    )&#10;&#10;updater.run(future_hours=$future_hours$, aws_profile='$profile$')&#10;&#10;for table_name in glue_tables:&#10;    database = table_name['database']&#10;    table_values = creator.get_table_values(&#10;        f'{database}_{table_name.get(&quot;table_name&quot;)}', definitions_path, session&#10;    )&#10;    new_last_partition = glue.get_last_partition(&#10;        client, database, table_values, 0&#10;    )&#10;&#10;    for dict in table_info:&#10;        if dict.get('table_name') == (f&quot;{database}.&quot;&#10;                                      f&quot;{table_name.get('table_name')}&quot;):&#10;            dict.update(&#10;                (k, new_last_partition)&#10;                for k, v in dict.items()&#10;                if k == 'new_last_partition'&#10;            )&#10;&#10;&#10;end_time = datetime.utcnow()&#10;&#10;print('UTC End time: ', end_time)&#10;print('Total Time (secconds):', (end_time - start_time).total_seconds(), '\n'&#10;      'Total Time (minutes):', (end_time - start_time).total_seconds()/60)&#10;&#10;print('### Table Partition Information ###')&#10;for table in table_info:&#10;    last_partition = datetime.strptime(&#10;        table.get('last_partition'), '%Y-%m-%dT%H:%M:%SZ'&#10;    )&#10;    new_last_partition = datetime.strptime(table.get(&#10;        'new_last_partition'), '%Y-%m-%dT%H:%M:%SZ'&#10;    )&#10;    print(table)&#10;    print(new_last_partition - last_partition)&#10;" description="Updates glue existing tables partitions" toReformat="false" toShortenFQNames="true">
    <variable name="profile" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="future_hours" expression="" defaultValue="24" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="compl" value="[&#10;    $VAR_EXPR$ &#10;    for $VAR$ in $ITERABLE$&#10;]" description="List comprehension" toReformat="false" toShortenFQNames="true">
    <variable name="ITERABLE" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR" expression="collectionElementName(ITERABLE)" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR_EXPR" expression="" defaultValue="VAR" alwaysStopAt="true" />
    <context />
  </template>
  <template name="compli" value="[&#10;    $VAR_EXPR$ &#10;    for $VAR$ in $ITERABLE$ &#10;    if $VAR_EXPR_IF$&#10;]" description="List comprehension with 'if'" toReformat="false" toShortenFQNames="true">
    <variable name="ITERABLE" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR" expression="collectionElementName(ITERABLE)" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR_EXPR" expression="" defaultValue="VAR" alwaysStopAt="true" />
    <variable name="VAR_EXPR_IF" expression="" defaultValue="VAR" alwaysStopAt="true" />
    <context />
  </template>
  <template name="comps" value="{&#10;    $VAR_EXPR$ &#10;    for $VAR$ in $ITERABLE$&#10;}" description="Set comprehension" toReformat="false" toShortenFQNames="true">
    <variable name="ITERABLE" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR" expression="collectionElementName(ITERABLE)" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR_EXPR" expression="" defaultValue="VAR" alwaysStopAt="true" />
    <context />
  </template>
  <template name="compd" value="{&#10;    $KEY_EXPR$: $VAL_EXPR$ &#10;    for $VAR$ in $ITERABLE$&#10;}" description="Dict comprehension" toReformat="false" toShortenFQNames="true">
    <variable name="ITERABLE" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR" expression="collectionElementName(ITERABLE)" defaultValue="" alwaysStopAt="true" />
    <variable name="KEY_EXPR" expression="" defaultValue="VAR" alwaysStopAt="true" />
    <variable name="VAL_EXPR" expression="" defaultValue="VAR" alwaysStopAt="true" />
    <context />
  </template>
  <template name="compdi" value="{&#10;    $KEY_EXPR$: $VAL_EXPR$ &#10;    for $VAR$ in $ITERABLE$ &#10;    if $VAR_EXPR_IF$&#10;}" description="Dict comprehension with 'if'" toReformat="false" toShortenFQNames="true">
    <variable name="ITERABLE" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR" expression="collectionElementName(ITERABLE)" defaultValue="" alwaysStopAt="true" />
    <variable name="KEY_EXPR" expression="" defaultValue="VAR" alwaysStopAt="true" />
    <variable name="VAL_EXPR" expression="" defaultValue="VAR" alwaysStopAt="true" />
    <variable name="VAR_EXPR_IF" expression="" defaultValue="VAR" alwaysStopAt="true" />
    <context />
  </template>
  <template name="glue_get_last_partition" value="import boto3&#10;&#10;from emr_manager import creator&#10;from emr_manager import glue&#10;from emr_manager import schemas&#10;&#10;session =  boto3.Session(profile_name='$profile$')&#10;client = session.client('glue')&#10;&#10;table = '$table$' # e.g.: api.hourlyActiveSessions&#10;&#10;database = table.split('.')[0]&#10;table_name = table.split('.')[-1]&#10;&#10;definition_path = schemas.get_local_definitions_path()&#10;&#10;table_values = creator.get_table_values(f'{database}_{table_name}', definition_path, session)&#10;&#10;las_partition = glue.get_last_partition(client, f'{database}', table_values)&#10;print(las_partition)&#10;&#10;&#10;&#10;" description="Gets the last partition for a table" toReformat="false" toShortenFQNames="true">
    <variable name="profile" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="table" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="glueDropTableByDB" value="from emr_manager import destructor&#10;from emr_manager.glue import tables&#10;import boto3&#10;&#10;database = input('Database name: ')&#10;&#10;session = boto3.Session(profile_name='$profile$')&#10;client = session.client('glue')&#10;&#10;glue_tables = tables.get_table_names(client, [database])&#10;&#10;table_names = [&#10;    tables['table_name']&#10;    for tables in glue_tables&#10;]&#10;&#10;destructor.run(database=database,&#10;               tables=table_names,&#10;               aws_profile='$profile$')&#10;" description="Drops tables in database" toReformat="false" toShortenFQNames="true">
    <variable name="profile" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="glueValidateLastPartitions" value="from datetime import datetime&#10;&#10;import boto3&#10;&#10;from emr_manager import creator&#10;from emr_manager import glue&#10;from emr_manager import schemas&#10;&#10;def run():&#10;    session = boto3.Session(profile_name='$profile$')&#10;    client = session.client('glue')&#10;&#10;    definitions_path = schemas.get_local_definitions_path()&#10;&#10;    dynamo_db_tables = schemas.existing_table_names(definitions_path)&#10;&#10;    unique_databases: set = {&#10;        dictionary['database']&#10;        for dictionary in dynamo_db_tables&#10;    }&#10;&#10;    databases = list(unique_databases)&#10;&#10;    glue_tables = glue.get_table_names(client, databases)&#10;    #glue_tables = [{'table_name': 'dailyactiveaccounts', 'database': 'api'}]&#10;    table_info = []&#10;    print('=== Tables With Last Partitions ===')&#10;    for table_name in glue_tables:&#10;        database = table_name['database']&#10;&#10;        table_values = creator.get_table_values(&#10;            f'{database}_{table_name.get(&quot;table_name&quot;)}', definitions_path, session&#10;        )&#10;        last_partition = glue.get_last_partition(client, database, table_values, 0)&#10;&#10;        table_info.append(&#10;                {&#10;                    'table_name': f'{database}.{table_name.get(&quot;table_name&quot;)}',&#10;                    'last_partition': last_partition,&#10;                    'new_last_partition': '',&#10;                    'bucket': table_values['bucket']&#10;                 }&#10;        )&#10;        if last_partition:&#10;            print(&#10;                '[Last Partition]:', last_partition,&#10;                ' | [Table]:', f'{database}.{table_name.get(&quot;table_name&quot;)}',&#10;                ' | [Bucket]:', table_values['bucket']&#10;            )&#10;&#10;    print(f'\n=== Total Tables {len(table_info)} ===')&#10;    print('\n=== Tables With No Last Partitions ===')&#10;    for table in table_info:&#10;        try:&#10;            last_partition = datetime.strptime(&#10;                table.get('last_partition'), '%Y-%m-%dT%H:%M:%SZ'&#10;            )&#10;        except Exception:&#10;            last_partition = None&#10;            print(table['table_name'], last_partition, table['bucket'])&#10;&#10;if __name__ == '__main__':&#10;    run()&#10;" description="Validates if all tables have last partitions" toReformat="false" toShortenFQNames="true">
    <variable name="profile" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="testfileNoClass" value="from unittest.mock import MagicMock&#10;from unittest.mock import patch&#10;&#10;import pytest&#10;&#10;&#10;@patch('example.function')&#10;def test_return_value(function: MagicMock):&#10;    &quot;&quot;&quot;Tests return value with called once&quot;&quot;&quot;&#10;    &#10;    assert result == mock_post.return_value&#10;    assert mock_get.call_count == 2&#10;    function.assert_called_once()&#10;&#10;&#10;@patch('example.function')&#10;def test_with_raise(function: MagicMock):&#10;    &quot;&quot;&quot;Tests return value with called once&quot;&quot;&quot;&#10;&#10;    with pytest.raises(ValueError):&#10;        run_function()&#10;" description="Test file examples with no class" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="sessionClient" value="session = boto3.Session(profile_name=aws_profile)&#10;region = session.region_name or 'us-east-1'&#10;client = session.client('$client$', region_name=region)" description="Code snippet for client" toReformat="false" toShortenFQNames="true">
    <variable name="client" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="backoff" value="import time&#10;&#10;def backoff_function(param: str, attempt_limit: int = 10):&#10;    &quot;&quot;&quot;&#10;    Example of backoff function&#10;&#10;    :param param:&#10;        some param&#10;    :param attempt_limit:&#10;        The number of attempts to execute query if a non user error occurs.&#10;    :return&#10;        The final presto_query returned by the exexute_attempt() function.&#10;    &quot;&quot;&quot;&#10;&#10;    attempt = 0&#10;    while attempt &lt; attempt_limit:&#10;        try:&#10;            raise ValueError(param)&#10;        except Exception as error:&#10;            time.sleep(min(128, 2 ** attempt))&#10;            attempt += 1&#10;            print('Sleeping ', 2 ** attempt, 'seconds')&#10;&#10;&#10;backoff_function('Failed')" description="Exponential Backoff snippet" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="cli_example" value="import json&#10;import os&#10;import typing&#10;from argparse import ArgumentParser&#10;&#10;my_directory = os.path.realpath(os.path.dirname(__file__))&#10;&#10;&#10;def populate_print_something_two(parser: ArgumentParser) -&gt; ArgumentParser:&#10;    &quot;&quot;&quot;Populates the print something two action subparser&quot;&quot;&quot;&#10;    parser.add_argument(&#10;        '-v', '--test_variable',&#10;        dest='test_variable',&#10;        help='Test variable ...'&#10;    )&#10;&#10;&#10;def populate_print_something(parser: ArgumentParser) -&gt; ArgumentParser:&#10;    &quot;&quot;&quot;Populates the print something action subparser&quot;&quot;&quot;&#10;    parser.add_argument(&#10;        'tables',&#10;        nargs='*',&#10;        help='List of tables separated by space. E.g.: table1 table2'&#10;    )&#10;    parser.add_argument(&#10;        '-d', '--database',&#10;        dest='database',&#10;        help='Glue database where the tables exist',&#10;    )&#10;    parser.add_argument(&#10;        '-p', '--profile',&#10;        dest='aws_profile',&#10;        help='AWS profile to use when interacting with Glue'&#10;    )&#10;    return parser&#10;&#10;&#10;def parse(arguments: typing.List[str] = None):&#10;    &quot;&quot;&quot;&#10;    Parses the command line arguments for current execution&#10;&#10;    :param arguments:&#10;        The command line arguments to parse as a list. If omitted the standard&#10;        sys.argv arguments will be used instead.&#10;    &quot;&quot;&quot;&#10;&#10;    parser = ArgumentParser()&#10;    parser.add_argument('--version', action='store_true', default=False)&#10;    subparsers = parser.add_subparsers(dest='action')&#10;&#10;    populate_print_something(subparsers.add_parser('print_something'))&#10;    populate_print_something_two(subparsers.add_parser('print_something_two'))&#10;&#10;    return vars(parser.parse_args(args=arguments))&#10;&#10;&#10;def get_path(*args: str) -&gt; str:&#10;    &quot;&quot;&quot;Returns a joined path relative to the root of this package&quot;&quot;&quot;&#10;    return os.path.realpath(os.path.join(my_directory, *args))&#10;&#10;&#10;def show_version(**kwargs):&#10;    &quot;&quot;&quot;Displays the current emr_manager version&quot;&quot;&quot;&#10;&#10;    path = get_path('settings.json')&#10;    with open(path) as f:&#10;        data = json.load(f)&#10;&#10;    print('EMR Manager Version {}'.format(data['version']))&#10;    return data['version']&#10;&#10;&#10;def show_help():&#10;    &quot;&quot;&quot;Displays the command help and exits&quot;&quot;&quot;&#10;    parse(['--help'])&#10;&#10;&#10;def run(arguments: typing.List[str] = None):&#10;    &quot;&quot;&quot;&#10;    Executes an EMR manager command action&#10;&#10;    :param arguments:&#10;        The command line arguments to parse as a list. If omitted the standard&#10;        sys.argv arguments will be used instead.&#10;    &quot;&quot;&quot;&#10;&#10;    args = parse(arguments)&#10;    default_action = 'version' if args.pop('version') else None&#10;    action = args.pop('action') or default_action&#10;&#10;    actions = dict(&#10;        version=show_version,&#10;        print_something=print_something, #print_something.run&#10;        print_something_two=print_something_two&#10;    )&#10;    command = actions.get(action) or show_help&#10;    command(**args)&#10;&#10;&#10;def print_something(database: str, tables: list, aws_profile: str = None, **kwargs):&#10;    &quot;&quot;&quot;Prints&quot;&quot;&quot;&#10;&#10;    print('database:', database)&#10;    print('tables:', tables)&#10;    print('aws_profile:', aws_profile)&#10;&#10;&#10;def print_something_two(test_variable: str, **kwargs):&#10;    &quot;&quot;&quot;Prints&quot;&quot;&quot;&#10;&#10;    print('test_variable:', test_variable)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run()&#10;" description="Example of a CLI" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="timeit_code" value="import timeit&#10;&#10;setup_run_once = &quot;&quot;&quot;&#10;import pandas as pd&#10;&#10;left_df = pd.DataFrame(&#10;[&#10;    {'accountId': 1, 'userId': 10},&#10;    {'accountId': 2, 'userId': 11},&#10;]&#10;)&#10;&quot;&quot;&quot;&#10;&#10;statement_to_run = 'len(left_df)'&#10;&#10;time = timeit.timeit(stmt=statement_to_run, setup=setup_run_once, number=10000)&#10;print('\n', time)&#10;&#10;statement = 'len(left_df.index)'&#10;time_index = timeit.timeit(stmt=statement_to_run, setup=setup_run_once, number=10000)&#10;print('\n', time_index)" description="Way to test how long your code takes" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="dataframeExample" value="import pandas as pd&#10;&#10;df = pd.DataFrame(&#10;    [&#10;        {'columnA': 1, 'storedAt': '2018-05-01', 'attendanceHealth': 'hey'},&#10;        {'columnA': 2, 'storedAt': '2018-05-01', 'attendanceHealth': 'hey'},&#10;        {'columnA': 2, 'storedAt': '2018-05-01', 'attendanceHealth': 'hey'},&#10;        {'columnA': 2, 'storedAt': '2018-05-02', 'attendanceHealth': 'hey'},&#10;        {'columnA': 2, 'storedAt': '2018-05-02', 'attendanceHealth': 'hey'},&#10;        {'columnA': 2, 'storedAt': '2018-05-01', 'attendanceHealth': 'hey'},&#10;        {'columnA': 2, 'storedAt': '2018-05-01', 'attendanceHealth': 'hey'},&#10;        {'columnA': 2, 'storedAt': '2018-05-01', 'attendanceHealth': 'hey'}&#10;    ]&#10;)&#10;&#10;account_health = df&#10;&#10;account_health_aggregated = (&#10;    account_health&#10;    .round(0)&#10;    .groupby(['storedAt', 'attendanceHealth'])&#10;    .count()&#10;)&#10;&#10;print(account_health_aggregated)" description="Snippet of a fake dataframe." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="sortList" value="new_list = sorted(list, key=lambda x: x[0])" description="Sorts a list based on a row" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="add_path" value="import os&#10;import sys&#10;&#10;my_directory = os.path.dirname(os.path.realpath(__file__))&#10;project_path = os.path.realpath(os.path.join(my_directory, '..'))&#10;sys.path.append(project_path)" description="Adds script to sys path" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="test_sqlite_engine" value="from datetime import datetime&#10;from datetime import timedelta&#10;&#10;import sqlalchemy as sa&#10;from sqlalchemy import Column&#10;from sqlalchemy import DateTime&#10;from sqlalchemy import Integer&#10;from sqlalchemy import MetaData&#10;from sqlalchemy import String&#10;from sqlalchemy import Table&#10;&#10;&#10;&#10;def get_test_engine():&#10;    &quot;&quot;&quot;&#10;    Returns an engine that has users and accounts table with some data. The date&#10;    for the records will be 2018-12-6 22:05:00. users table have updated_at, and&#10;    created_at; accounts table doesn't have partition columns&#10;    &quot;&quot;&quot;&#10;    sqllite_engine = sa.create_engine('sqlite:///:memory:', echo=True)&#10;&#10;    metadata = MetaData()&#10;&#10;    users = Table(&#10;        'users', metadata,&#10;        Column('id', Integer, primary_key=True),&#10;        Column('email', String),&#10;        Column('first_name', String),&#10;        Column('last_name', String),&#10;        Column('phone_number', String),&#10;        Column('updated_at', DateTime),&#10;        Column('created_at', DateTime)&#10;    )&#10;&#10;    accounts = Table(&#10;        'accounts', metadata,&#10;        Column('id', Integer, primary_key=True),&#10;        Column('credit_email', String),&#10;        Column('credit_name', String)&#10;    )&#10;&#10;    metadata.create_all(sqllite_engine)&#10;&#10;    updated_at = datetime(year=2018, month=12, day=6, hour=22, minute=5)&#10;    created_at = updated_at - timedelta(hours=5)&#10;&#10;    values = {&#10;        'first_name': 'John',&#10;        'last_name': 'Smith',&#10;        'email': 'john@smith.com',&#10;        'phone_number': '555-555-5555',&#10;        'id': 12345,&#10;        'updated_at': updated_at,&#10;        'created_at': created_at&#10;    }&#10;    users_insert = users.insert().values(**values)&#10;    sqllite_engine.execute(users_insert)&#10;&#10;    account_values = {&#10;        'id': 12345,&#10;        'credit_email': 'john@smith.com',&#10;        'credit_name': 'John'&#10;    }&#10;    insert = accounts.insert().values(**account_values)&#10;    sqllite_engine.execute(insert)&#10;    return sqllite_engine" description="This is a function that returns a sqlite test engine to be used in test" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="run_query" value="import os&#10;&#10;import boto3&#10;import minions&#10;&#10;os.environ['MINIONS_USER_AGENT'] = 'local-query-testing'&#10;session = boto3.Session(region_name='us-east-1')&#10;&#10;query = &quot;&quot;&quot;&#10;    SELECT&#10;      accountId&#10;    FROM&#10;      hive.api.activity&#10;&#10;    &quot;&quot;&quot;&#10;&#10;result = minions.run_query(query, session)&#10;print(result)&#10;" description="Snippet to minions run query" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="testFunction" value="def test_$function$():&#10;    &quot;&quot;&quot;Should run function with no errors&quot;&quot;&quot;&#10;    &#10;    result = $function$()&#10;    assert 1 == result" description="Creates a test function" toReformat="false" toShortenFQNames="true">
    <variable name="function" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>