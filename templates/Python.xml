<templateSet group="Python">
  <template name="testfile" value="import unittest&#10;from unittest.mock import MagicMock&#10;from unittest.mock import patch&#10;&#10;&#10;class Test$class_name$(unittest.TestCase):&#10;    &quot;&quot;&quot;Test suite for &quot;&quot;&quot;&#10;&#10;    @patch('mocking_example')&#10;    def test_$test_name$(self, mocking_example: MagicMock):&#10;        &quot;&quot;&quot;Should ...&quot;&quot;&quot;&#10;&#10;    # TODO: Add other tests&#10;" description="Creates unittest basic code." toReformat="false" toShortenFQNames="true">
    <variable name="class_name" expression="snakeCase(String)" defaultValue="Module" alwaysStopAt="true" />
    <variable name="test_name" expression="underscoresToSpaces(String)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="gluedroptable" value="from emr_manager import destructor&#10;&#10;destructor.run(database='mercury', &#10;               table_names=['$table_name$'], &#10;               aws_profile='dedevel')" description="Deletes table in glue" toReformat="false" toShortenFQNames="true">
    <variable name="table_name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="gluecreatetables" value="import datetime&#10;from datetime import timedelta&#10;&#10;import boto3&#10;&#10;from emr_manager import creator&#10;from emr_manager import destructor&#10;from emr_manager import glue&#10;&#10;start_time = datetime.datetime.utcnow()&#10;print('UTC End time: ', start_time)&#10;partitions_num = 1&#10;&#10;session = boto3.Session(profile_name='$aws_profile$')&#10;client = session.client('glue')&#10;&#10;glue_tables = glue.get_tables(client, 'mercury')&#10;&#10;destructor.run('mercury', glue_tables, aws_profile='$aws_profile$')&#10;creator.run(partitions_num, '$aws_profile$')&#10;&#10;end_time = datetime.datetime.utcnow()&#10;print('UTC End time: ', end_time)&#10;print('Total Time (secconds):', (end_time - start_time).total_seconds(), &#10;      'Total Time (minutes):', (end_time - start_time).total_seconds()/60)&#10;&#10;print('Last Partition: ', datetime.datetime.utcnow() + timedelta(&#10;    hours=partitions_num - 1))" description="Deletes and creates all glue tables" toReformat="false" toShortenFQNames="true">
    <variable name="aws_profile" expression="" defaultValue="dedevel" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="glueupdatepartitions" value="import datetime&#10;&#10;import boto3&#10;&#10;from emr_manager import creator&#10;from emr_manager import glue&#10;from emr_manager import schemas&#10;from emr_manager import updater&#10;&#10;start_time = datetime.datetime.utcnow()&#10;print('UTC End time: ', start_time)&#10;&#10;session = boto3.Session(profile_name='dedevel')&#10;client = session.client('glue')&#10;&#10;glue_tables = glue.get_tables(client, 'mercury')&#10;&#10;table_mapping = creator.get_lowercase_uppercase_tables(&#10;    schemas.existing_table_names()&#10;)&#10;&#10;table_info = []&#10;&#10;for table_name in glue_tables:&#10;    table_values = creator.get_table_values((table_mapping.get(table_name)&#10;                                            or table_name), session)&#10;    last_partition = glue.get_last_partition(client, 'mercury', table_values, 0)&#10;&#10;    table_info.append(&#10;            {&#10;                'table_name': table_name,&#10;                'last_partition': last_partition,&#10;                'new_last_partition': ''&#10;             }&#10;    )&#10;&#10;updater.run(future_hours=$future_hours$, aws_profile='dedevel')&#10;&#10;for table_name in glue_tables:&#10;    table_values = creator.get_table_values(table_mapping.get(table_name)&#10;                                            or table_name)&#10;    new_last_partition = glue.get_last_partition(&#10;        client, 'mercury', table_values, 0&#10;    )&#10;&#10;    for dict in table_info:&#10;        if dict.get('table_name') == table_name:&#10;            print(dict)&#10;            dict.update(&#10;                (k, new_last_partition)&#10;                for k, v in dict.items()&#10;                if k == 'new_last_partition'&#10;            )&#10;&#10;&#10;end_time = datetime.datetime.utcnow()&#10;&#10;print('UTC End time: ', end_time)&#10;print('Total Time (secconds):', (end_time - start_time).total_seconds(),&#10;      'Total Time (minutes):', (end_time - start_time).total_seconds()/60)&#10;&#10;print('### Table Partition Information ###')&#10;for table in table_info:&#10;    print(table)&#10;" description="Updates glue existing tables partitions" toReformat="false" toShortenFQNames="true">
    <variable name="future_hours" expression="" defaultValue="24" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
</templateSet>